//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlobRocket.Uploader.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BlobRocket.Uploader.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the pre-defined Azure Storage account access key..
        /// </summary>
        internal static string OptionAccessKey {
            get {
                return ResourceManager.GetString("OptionAccessKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the Azure Storage account name.  Storage account names must be between 3 and 24 characters in length, may contain numbers and lowercase letters only and must match the name of an existing storage account within Azure..
        /// </summary>
        internal static string OptionAccount {
            get {
                return ResourceManager.GetString("OptionAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies one or more comma-separated email accounts to send status reports to..
        /// </summary>
        internal static string OptionAlertsTo {
            get {
                return ResourceManager.GetString("OptionAlertsTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the file-name casing (Normal, LowerCase, or UpperCase)..
        /// </summary>
        internal static string OptionCasing {
            get {
                return ResourceManager.GetString("OptionCasing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the file handling mode (Sync or Overwrite)..
        /// </summary>
        internal static string OptionHandling {
            get {
                return ResourceManager.GetString("OptionHandling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the file system directory to persist log files to.  If the directory doesn&apos;t exist it will be created.  A new log file will be created for each BlobRocket.Uploader run and have a unique and standard name (i.e. BlobRocket_20151224_123117999.log)..
        /// </summary>
        internal static string OptionLogFolder {
            get {
                return ResourceManager.GetString("OptionLogFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a file that contains parameters.  BlobRocket.Uploader processes the parameters in the file just as if they had been specified on the command line.  In a response file, you can either specify multiple parameters on a single line, or specify each parameter on its own line. Note that an individual parameter cannot span multiple lines.  Response files can include comments lines that begin with the # symbol.  You can specify multiple response files. However, note that BlobRocket.Uploader does not suppo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OptionParamFile {
            get {
                return ResourceManager.GetString("OptionParamFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a file pattern that indicates which files to copy. The file pattern provided is matched against files within the directory specified by the -S option. BlobRocket.Uploader also matches the specified pattern against all files in any subfolders beneath the directory.  BlobRocket.Uploader uses uses case-insensitive matching in all cases. The default file pattern used when no file pattern is specified is \&quot;*.*\&quot;. Specifying multiple file patterns is not supported..
        /// </summary>
        internal static string OptionPattern {
            get {
                return ResourceManager.GetString("OptionPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the file system directory from which to copy files from.  The directory must exist..
        /// </summary>
        internal static string OptionSource {
            get {
                return ResourceManager.GetString("OptionSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the container to copy the files to.  If the container doesn&apos;t already exist, it will be created.  Container names must start with a letter or number, and can contain only letters, numbers, and the dash (-) character.  Every dash (-) character must be immediately preceded and followed by a letter or number; consecutive dashes are not permitted in container names.  All letters in a container name must be lowercase.  Container names must be from 3 through 63 characters long..
        /// </summary>
        internal static string OptionTarget {
            get {
                return ResourceManager.GetString("OptionTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prints all messages to Standard Output..
        /// </summary>
        internal static string OptionVerbose {
            get {
                return ResourceManager.GetString("OptionVerbose", resourceCulture);
            }
        }
    }
}
